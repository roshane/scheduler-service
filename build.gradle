import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'checkstyle'
    id 'com.adarshr.test-logger' version '2.0.0'
}

group = 'com.aeon'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
}

sourceSets {
    intTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    intTestImplemntation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

task intTest(type: Test) {
    group = "verification"
    description = "Runs integration tests"
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    environment("spring.profiles.active","test")
    shouldRunAfter classes
}

task initGitProperties(type: JavaExec) {
    group = "Custom"
    description = "Create [git.properties]"
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.aeon.scheduler.service.util.MvnGitPropertyExtractor'
    args sourceSets.main.output.resourcesDir.toString()
    shouldRunAfter(classes)
}

task extractFatJar(type: Exec) {
    String jarOutputDir = Paths.get(buildDir.toString(), "libs")
    String fatJarName = String.format("%s-%s.jar", rootDir.name, version.toString())
    String fatJarPath = Paths.get(jarOutputDir, fatJarName)

    Path extPath = Paths.get(buildDir.toString(), "ext")
    Path resultPath = Files.createDirectories(extPath)
    workingDir = extPath
    String jarXvf = String.format("jar -xvf %s", fatJarPath.toString())
    commandLine 'cmd', '/c', jarXvf
}

task buildDockerImage(type: Exec) {
    group = "Custom"
    String dockerTag = String.format("%s:%s", rootDir.name, version.toString()).toLowerCase()
    description = String.format("Build docker image current[%s]", dockerTag)
    Path extPath = rootDir.toPath().resolve(Paths.get("build", "ext"))
    String dockerExec = String.format("docker build --build-arg DEPENDENCY=%s -t %s .", extPath.toString(), dockerTag)
    Path sourceDockerFile = rootDir.toPath().resolve("Dockerfile")
    try {
        Files.copy(sourceDockerFile, extPath.resolve(sourceDockerFile.getFileName()), StandardCopyOption.REPLACE_EXISTING)
    } catch (IOException ex) {
        ex.printStackTrace()
        throw ex //to break execution
    }
    workingDir = Paths.get("build", "ext").toString()
    commandLine 'cmd', '/c', dockerExec
}

//task hello {
//    doLast {
//        String jarOutputDir = Paths.get(buildDir.toString(), "libs")
//        String fatJarName = String.format("%s-%s", rootDir.name, version.toString())
//        println(jarOutputDir.toString() + "\n" + fatJarName)
//        println(sourceSets.main.output.resourcesDir.toString())
//        String dockerTag = String.format("%s:%s", rootDir.name, version.toString()).toLowerCase()
//        String dockerExec = String.format("docker build --build-arg DEPENDENCY=%s -t %s .", "build/ext", dockerTag)
//        Process process = Runtime.getRuntime().exec(dockerExec)
//        //TODO this doesn't work process will wait indefinitely
//        process.waitFor()
//        if (process.exitValue() == 0) {
//            println(dockerTag + " created successfully")
//        }
//    }
//}


build {
    dependsOn(check, test, intTest)
}

bootRun {
    dependsOn(initGitProperties)
}

bootJar {
    excludeDevtools = true
    dependsOn(initGitProperties)
}

springBoot {
    buildInfo()
}

intTest.dependsOn(initGitProperties)
buildDockerImage.dependsOn(bootJar, extractFatJar)

checkstyle {
    toolVersion = "8.32"
    configFile = file("$project.rootDir/config/check_style.xml")
    showViolations = true
    ignoreFailures = false
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'net.logstash.logback:logstash-logback-encoder:6.3'
    implementation 'org.postgresql:postgresql:42.2.12'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    //TODO should extend not working
    intTestImplementation 'org.springframework.boot:spring-boot-starter'
    intTestImplementation 'org.springframework.boot:spring-boot-starter-web'
    intTestImplementation 'org.springframework.boot:spring-boot-starter-jdbc'
    intTestImplementation 'org.springframework.boot:spring-boot-starter-quartz'
    intTestImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    intTestImplementation 'net.logstash.logback:logstash-logback-encoder:6.3'
    intTestImplementation 'org.postgresql:postgresql:42.2.12'
    intTest {
        intTestImplementation "org.testcontainers:postgresql:1.12.1"
    }

}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = false
    }
}

intTest {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}